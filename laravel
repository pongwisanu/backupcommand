Step 1 — Download & Install Docker

Step 2 — Fetch Laravel

MacOS/Linux — curl -L https://github.com/laravel/laravel/archive/v8.5.21.tar.gz | tar xz

Windows PowerShell — curl.exe -LJO https://github.com/laravel/laravel/archive/v8.5.21.tar.gz tar -xf laravel-8.5.21.tar.gz

Git - git clone https://github.com/laravel/laravel.git

Step 3—Installing application dependencies

Linux - docker run --rm -v $(pwd):/app composer install

Windows - docker run --rm -v ${pwd}:/app composer install

Step 4 — Creating a docker-compose file

MacOS/Linux — touch docker-compose.yaml

Windows PowerShell — fsutil file createnew docker-compose.yaml 0

version: '3.8'
services:
    
    # Application
    app:
        build:
            context: .
            dockerfile: app.dockerfile
        working_dir: /var/www
        volumes:
            - ./:/var/www
        depends_on:
            - "database"
    # Web Server
    web:
        build:
            context: .
            dockerfile: web.dockerfile
        working_dir: /var/www
        volumes:
            - ./:/var/www
        depends_on:
            - "app"
        ports:
            - 80:80
    # Database
    database:
        image: mysql:8.0
        volumes:
            - dbdata:/var/lib/mysql
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_USER: ${DB_USERNAME}
        ports:
            - 33061:3306
    # Database management
    pma:
        image: phpmyadmin:5.1
        environment:
            - PMA_ARBITRARY=1
            - PMA_HOST=${DB_HOST}
            - PMA_USER=${DB_USERNAME}
            - PMA_PASSWORD=${DB_PASSWORD}
            - PMA_PORT=${DB_PORT}
        depends_on:
            - database
        ports:
            - 8888:80
    # Mailing Server
    mailhog:
        image: mailhog/mailhog
        logging:
            driver: 'none'
        ports:
            - 1025:1025 
            - 8025:8025 

volumes:
    dbdata:
    
Step 5 — Creating our Dockerfiles

- app.dockerfile

FROM php:8.0-fpm

RUN apt-get update && apt-get install -y  \
    libfreetype6-dev \
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    --no-install-recommends \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql -j$(nproc) gd
      
or

FROM php:8.0-fpm

RUN apt-get update && apt-get install -y  \
    libmagickwand-dev \
    --no-install-recommends \
    && pecl install imagick \
    && docker-php-ext-enable imagick \
    && docker-php-ext-install pdo_mysql
    
- vhost.conf

server {
    listen 80;
    index index.php index.html;
    root /var/www/public;

    location / {
        try_files $uri /index.php?$args;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

- web.dockerfile

FROM nginx:1.21

COPY vhost.conf /etc/nginx/conf.d/default.conf

RUN ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log
    
Step 6 — Preparing your .env

mv .env.example .env

Step 7 — Starting your containers

docker-compose up

docker-compose exec app php artisan key:generate
docker-compose exec app php artisan optimize

Step 8 - Error

ถ้าติด permission ให้ chmod หรือ chown เป็น 777 เช่น log error ให้แก้ folder storage
